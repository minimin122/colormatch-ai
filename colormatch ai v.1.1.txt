<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ColorMatch AI - 실시간 가상 메이크업</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- MediaPipe 라이브러리 -->
    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/control_utils/control_utils.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils/drawing_utils.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/face_mesh.js"></script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --ivory: #FEFCF8;
            --soft-beige: #F5F2ED;
            --blush-pink: #F7E7E1;
            --dusty-rose: #D4A5A5;
            --soft-coral: #E8B4B8;
            --muted-lavender: #C4A4C7;
            --warm-gray: #8B7D7B;
            --deep-brown: #3D2E2A;
            --pure-white: #FFFFFF;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, var(--ivory) 0%, var(--blush-pink) 100%);
            min-height: 100vh;
            color: var(--deep-brown);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .screen {
            display: none;
            background: var(--pure-white);
            border-radius: 24px;
            box-shadow: 0 8px 32px rgba(61, 46, 42, 0.08);
            overflow: hidden;
            min-height: 85vh;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .screen.active {
            display: block;
            animation: fadeIn 0.6s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* 홈 화면 스타일 */
        .hero-section {
            text-align: center;
            padding: 80px 40px 60px;
            background: linear-gradient(135deg, var(--pure-white) 0%, var(--blush-pink) 100%);
            position: relative;
            overflow: hidden;
        }

        .hero-brand {
            font-size: 3.2rem;
            font-weight: 600;
            background: linear-gradient(135deg, var(--dusty-rose) 0%, var(--muted-lavender) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 24px;
        }

        .hero-title {
            font-size: 3rem;
            font-weight: 300;
            color: var(--deep-brown);
            margin-bottom: 16px;
            letter-spacing: -0.02em;
        }

        .hero-subtitle {
            font-size: 1.3rem;
            font-weight: 400;
            color: var(--warm-gray);
            margin-bottom: 48px;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
            line-height: 1.5;
        }

        .cta-button {
            background: linear-gradient(135deg, var(--dusty-rose) 0%, var(--soft-coral) 100%);
            color: var(--pure-white);
            border: none;
            padding: 20px 48px;
            font-size: 1.1rem;
            font-weight: 500;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 8px 24px rgba(212, 165, 165, 0.3);
        }

        .cta-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 32px rgba(212, 165, 165, 0.4);
        }

        /* 메이크업 화면 스타일 */
        .makeup-section {
            padding: 32px;
            background: var(--ivory);
        }

        .makeup-title {
            font-size: 2.2rem;
            font-weight: 500;
            text-align: center;
            margin-bottom: 16px;
            color: var(--deep-brown);
        }

        .makeup-subtitle {
            font-size: 1.1rem;
            color: var(--warm-gray);
            text-align: center;
            margin-bottom: 32px;
        }

        .makeup-container {
            display: flex;
            gap: 32px;
            align-items: flex-start;
            max-width: 1000px;
            margin: 0 auto;
        }

        .video-container {
            flex: 1;
            position: relative;
            border-radius: 24px;
            overflow: hidden;
            box-shadow: 0 16px 48px rgba(61, 46, 42, 0.15);
            background: var(--pure-white);
        }

        .video-canvas-wrapper {
            position: relative;
            width: 100%;
            max-width: 640px;
        }

        #inputVideo {
            width: 100%;
            height: auto;
            display: block;
            transform: scaleX(-1);
        }

        #outputCanvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            transform: scaleX(-1);
        }

        .face-indicator {
            position: absolute;
            top: 10px;
            right: 10px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #ff4444;
            animation: pulse 2s infinite;
            z-index: 10;
        }

        .face-indicator.detected {
            background: #44ff44;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .controls-panel {
            flex: 0 0 300px;
            background: var(--pure-white);
            padding: 32px 24px;
            border-radius: 20px;
            box-shadow: 0 8px 24px rgba(61, 46, 42, 0.08);
            border: 1px solid rgba(212, 165, 165, 0.1);
        }

        .control-group {
            margin-bottom: 32px;
        }

        .control-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--deep-brown);
            margin-bottom: 16px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .color-options {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 12px;
            margin-bottom: 16px;
        }

        .color-option {
            width: 60px;
            height: 60px;
            border-radius: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 3px solid transparent;
        }

        .color-option:hover {
            transform: scale(1.1);
        }

        .color-option.active {
            border-color: var(--dusty-rose);
            box-shadow: 0 0 0 2px rgba(212, 165, 165, 0.3);
        }

        .intensity-control {
            margin-top: 16px;
        }

        .intensity-label {
            font-size: 0.9rem;
            color: var(--warm-gray);
            margin-bottom: 8px;
            display: block;
        }

        .intensity-slider {
            width: 100%;
            height: 8px;
            border-radius: 4px;
            background: var(--soft-beige);
            outline: none;
            -webkit-appearance: none;
            appearance: none;
        }

        .intensity-slider::-webkit-slider-thumb {
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--dusty-rose) 0%, var(--soft-coral) 100%);
            cursor: pointer;
            box-shadow: 0 2px 8px rgba(212, 165, 165, 0.4);
        }

        .makeup-status {
            background: var(--soft-beige);
            padding: 16px;
            border-radius: 12px;
            text-align: center;
            font-weight: 500;
            margin-bottom: 24px;
        }

        .makeup-status.detected {
            background: linear-gradient(135deg, #E8F5E8 0%, #D4F1D4 100%);
            color: #2D5A2D;
        }

        .makeup-status.no-face {
            background: linear-gradient(135deg, #FFF4E6 0%, #FFE8CC 100%);
            color: #8B4513;
        }

        .makeup-status.error {
            background: linear-gradient(135deg, #FEE 0%, #FCC 100%);
            color: #C66;
        }

        .action-buttons {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .action-button {
            padding: 14px 24px;
            border: none;
            border-radius: 50px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.95rem;
        }

        .capture-button {
            background: linear-gradient(135deg, var(--dusty-rose) 0%, var(--soft-coral) 100%);
            color: var(--pure-white);
            box-shadow: 0 6px 20px rgba(212, 165, 165, 0.3);
        }

        .reset-button {
            background: var(--pure-white);
            color: var(--warm-gray);
            border: 2px solid var(--blush-pink);
        }

        .back-button {
            background: var(--soft-beige);
            color: var(--deep-brown);
        }

        .action-button:hover {
            transform: translateY(-2px);
        }

        @media (max-width: 1024px) {
            .makeup-container {
                flex-direction: column;
            }
            
            .controls-panel {
                flex: none;
                max-width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- 홈 화면 -->
        <div class="screen active" id="homeScreen">
            <div class="hero-section">
                <div class="hero-brand">ColorMatch AI</div>
                <h1 class="hero-title">실시간 가상 메이크업</h1>
                <p class="hero-subtitle">AI가 당신의 얼굴에 실시간으로 완벽한 메이크업을 적용해보세요 ✨<br>립스틱과 블러셔를 자유롭게 시도해보고 가장 어울리는 컬러를 찾아보세요</p>
                <button class="cta-button" onclick="startMakeup()">🎨 가상 메이크업 체험하기</button>
            </div>
        </div>

        <!-- 가상 메이크업 화면 -->
        <div class="screen" id="makeupScreen">
            <div class="makeup-section">
                <h2 class="makeup-title">실시간 가상 메이크업 💄</h2>
                <p class="makeup-subtitle">얼굴을 화면에 맞춰주시고 원하는 컬러를 선택해보세요</p>
                
                <div class="makeup-container">
                    <div class="video-container">
                        <div class="video-canvas-wrapper">
                            <video id="inputVideo" autoplay playsinline muted></video>
                            <canvas id="outputCanvas"></canvas>
                            <div class="face-indicator" id="faceIndicator"></div>
                        </div>
                    </div>
                    
                    <div class="controls-panel">
                        <div class="makeup-status" id="faceStatus">
                            카메라를 준비하고 있어요...
                        </div>
                        
                        <div class="control-group">
                            <div class="control-title">💋 립스틱 컬러</div>
                            <div class="color-options" id="lipColors">
                                <div class="color-option active" data-color="199,92,92" style="background: linear-gradient(135deg, #C75C5C 0%, #B85252 100%);"></div>
                                <div class="color-option" data-color="240,128,128" style="background: linear-gradient(135deg, #F08080 0%, #FA8072 100%);"></div>
                                <div class="color-option" data-color="255,182,193" style="background: linear-gradient(135deg, #FFB6C1 0%, #FF69B4 100%);"></div>
                                <div class="color-option" data-color="220,20,60" style="background: linear-gradient(135deg, #DC143C 0%, #B91C3C 100%);"></div>
                                <div class="color-option" data-color="255,105,180" style="background: linear-gradient(135deg, #FF69B4 0%, #FF1493 100%);"></div>
                                <div class="color-option" data-color="139,69,19" style="background: linear-gradient(135deg, #8B4513 0%, #A0522D 100%);"></div>
                            </div>
                            <div class="intensity-control">
                                <label class="intensity-label">립스틱 진하기</label>
                                <input type="range" class="intensity-slider" id="lipIntensity" min="0" max="1" step="0.1" value="0.6">
                            </div>
                        </div>
                        
                        <div class="control-group">
                            <div class="control-title">🌸 블러셔 컬러</div>
                            <div class="color-options" id="blushColors">
                                <div class="color-option active" data-color="255,127,80" style="background: linear-gradient(135deg, #FF7F50 0%, #FF6347 100%);"></div>
                                <div class="color-option" data-color="255,160,122" style="background: linear-gradient(135deg, #FFA07A 0%, #FA8072 100%);"></div>
                                <div class="color-option" data-color="255,228,225" style="background: linear-gradient(135deg, #FFE4E1 0%, #FFCCCB 100%);"></div>
                                <div class="color-option" data-color="255,182,193" style="background: linear-gradient(135deg, #FFB6C1 0%, #FF91A4 100%);"></div>
                                <div class="color-option" data-color="255,105,180" style="background: linear-gradient(135deg, #FF69B4 0%, #FF1493 100%);"></div>
                                <div class="color-option" data-color="219,112,147" style="background: linear-gradient(135deg, #DB7093 0%, #C478A0 100%);"></div>
                            </div>
                            <div class="intensity-control">
                                <label class="intensity-label">블러셔 진하기</label>
                                <input type="range" class="intensity-slider" id="blushIntensity" min="0" max="1" step="0.1" value="0.4">
                            </div>
                        </div>
                        
                        <div class="action-buttons">
                            <button class="action-button capture-button" onclick="capturePhoto()">📸 완성된 메이크업 저장</button>
                            <button class="action-button reset-button" onclick="resetMakeup()">🔄 메이크업 지우기</button>
                            <button class="action-button back-button" onclick="goHome()">← 처음으로</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 전역 변수
        let faceMesh = null;
        let camera = null;
        let inputVideo = null;
        let outputCanvas = null;
        let canvasCtx = null;
        let faceDetected = false;
        let currentLipColor = [199, 92, 92];
        let currentBlushColor = [255, 127, 80];
        let lipIntensity = 0.6;
        let blushIntensity = 0.4;
        let isInitialized = false;

        // 얼굴 랜드마크 인덱스
        const LIPS_UPPER = [61, 84, 17, 314, 405, 320, 307, 375, 321, 308, 324, 318];
        const LIPS_LOWER = [78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308, 415, 310, 311, 312, 13, 82, 81, 80, 78];
        const LEFT_CHEEK = [116, 117, 118, 119, 120, 121, 126, 142, 36, 205, 206, 207, 213, 192, 147, 123];
        const RIGHT_CHEEK = [345, 346, 347, 348, 349, 350, 451, 452, 453, 464, 435, 410, 454, 323, 361, 340];

        // 화면 전환
        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => {
                screen.classList.remove('active');
            });
            document.getElementById(screenId).classList.add('active');
        }

        // 홈으로 돌아가기
        function goHome() {
            showScreen('homeScreen');
            if (camera) {
                camera.stop();
                camera = null;
            }
            isInitialized = false;
            faceDetected = false;
        }

        // 메이크업 시작
        async function startMakeup() {
            try {
                showScreen('makeupScreen');
                updateStatus('loading', 'MediaPipe 초기화 중...');
                await initializeFaceMesh();
            } catch (error) {
                console.error('메이크업 시작 오류:', error);
                updateStatus('error', '초기화에 실패했습니다. 페이지를 새로고침해주세요.');
            }
        }

        // MediaPipe 초기화
        async function initializeFaceMesh() {
            try {
                // MediaPipe 라이브러리 확인
                if (typeof FaceMesh === 'undefined') {
                    throw new Error('MediaPipe FaceMesh 라이브러리가 로드되지 않았습니다.');
                }

                updateStatus('loading', 'AI 모델 로딩 중...');

                // FaceMesh 설정
                faceMesh = new FaceMesh({
                    locateFile: (file) => {
                        return `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`;
                    }
                });

                faceMesh.setOptions({
                    maxNumFaces: 1,
                    refineLandmarks: true,
                    minDetectionConfidence: 0.5,
                    minTrackingConfidence: 0.5
                });

                faceMesh.onResults(onResults);

                updateStatus('loading', '카메라 접근 중...');

                // 비디오 요소 설정
                inputVideo = document.getElementById('inputVideo');
                outputCanvas = document.getElementById('outputCanvas');
                canvasCtx = outputCanvas.getContext('2d');

                // 카메라 초기화
                if (typeof Camera === 'undefined') {
                    throw new Error('MediaPipe Camera 유틸리티가 로드되지 않았습니다.');
                }

                camera = new Camera(inputVideo, {
                    onFrame: async () => {
                        if (isInitialized && faceMesh) {
                            await faceMesh.send({ image: inputVideo });
                        }
                    },
                    width: 640,
                    height: 480
                });

                await camera.start();

                // 캔버스 크기 설정
                setTimeout(() => {
                    if (inputVideo.videoWidth > 0 && inputVideo.videoHeight > 0) {
                        outputCanvas.width = inputVideo.videoWidth;
                        outputCanvas.height = inputVideo.videoHeight;
                        isInitialized = true;
                        setupControlListeners();
                        updateStatus('detected', '✨ 준비 완료! 얼굴을 화면에 맞춰주세요');
                    }
                }, 1000);

            } catch (error) {
                console.error('FaceMesh 초기화 오류:', error);
                handleInitError(error);
            }
        }

        // 초기화 에러 처리
        function handleInitError(error) {
            let message = '알 수 없는 오류가 발생했습니다.';
            
            if (error.message.includes('MediaPipe')) {
                message = 'MediaPipe 라이브러리 로딩에 실패했습니다. 인터넷 연결을 확인하고 페이지를 새로고침해주세요.';
            } else if (error.name === 'NotAllowedError') {
                message = '카메라 권한이 거부되었습니다. 브라우저 설정에서 카메라 권한을 허용해주세요.';
            } else if (error.name === 'NotFoundError') {
                message = '카메라를 찾을 수 없습니다. 카메라가 연결되어 있는지 확인해주세요.';
            }

            updateStatus('error', `❌ ${message}`);
        }

        // 얼굴 감지 결과 처리
        function onResults(results) {
            if (!isInitialized || !canvasCtx) return;

            canvasCtx.save();
            canvasCtx.clearRect(0, 0, outputCanvas.width, outputCanvas.height);

            if (results.multiFaceLandmarks && results.multiFaceLandmarks.length > 0) {
                faceDetected = true;
                document.getElementById('faceIndicator').classList.add('detected');
                updateStatus('detected', '👤 얼굴이 인식되었어요! 컬러를 선택해보세요');

                const landmarks = results.multiFaceLandmarks[0];
                
                if (blushIntensity > 0) {
                    applyBlush(landmarks);
                }

                if (lipIntensity > 0) {
                    applyLipstick(landmarks);
                }

            } else {
                faceDetected = false;
                document.getElementById('faceIndicator').classList.remove('detected');
                updateStatus('no-face', '얼굴을 화면 중앙에 맞춰주세요');
            }

            canvasCtx.restore();
        }

        // 립스틱 적용
        function applyLipstick(landmarks) {
            canvasCtx.save();
            canvasCtx.globalAlpha = lipIntensity;
            canvasCtx.fillStyle = `rgb(${currentLipColor[0]}, ${currentLipColor[1]}, ${currentLipColor[2]})`;
            canvasCtx.globalCompositeOperation = 'multiply';

            drawLipArea(landmarks, LIPS_UPPER);
            drawLipArea(landmarks, LIPS_LOWER);

            canvasCtx.restore();
        }

        // 입술 영역 그리기
        function drawLipArea(landmarks, indices) {
            if (indices.length === 0) return;
            
            canvasCtx.beginPath();
            
            indices.forEach((index, i) => {
                if (landmarks[index]) {
                    const point = landmarks[index];
                    const x = point.x * outputCanvas.width;
                    const y = point.y * outputCanvas.height;
                    
                    if (i === 0) {
                        canvasCtx.moveTo(x, y);
                    } else {
                        canvasCtx.lineTo(x, y);
                    }
                }
            });
            
            canvasCtx.closePath();
            canvasCtx.fill();
        }

        // 블러셔 적용
        function applyBlush(landmarks) {
            canvasCtx.save();
            canvasCtx.globalAlpha = blushIntensity * 0.6;
            
            drawBlushArea(landmarks, LEFT_CHEEK);
            drawBlushArea(landmarks, RIGHT_CHEEK);

            canvasCtx.restore();
        }

        // 블러셔 영역 그리기
        function drawBlushArea(landmarks, indices) {
            if (indices.length === 0) return;
            
            let centerX = 0, centerY = 0;
            let validPoints = 0;
            
            indices.forEach(index => {
                if (landmarks[index]) {
                    centerX += landmarks[index].x * outputCanvas.width;
                    centerY += landmarks[index].y * outputCanvas.height;
                    validPoints++;
                }
            });
            
            if (validPoints === 0) return;
            
            centerX /= validPoints;
            centerY /= validPoints;
            
            const gradient = canvasCtx.createRadialGradient(
                centerX, centerY, 0,
                centerX, centerY, 40
            );
            
            gradient.addColorStop(0, `rgba(${currentBlushColor[0]}, ${currentBlushColor[1]}, ${currentBlushColor[2]}, 0.8)`);
            gradient.addColorStop(0.7, `rgba(${currentBlushColor[0]}, ${currentBlushColor[1]}, ${currentBlushColor[2]}, 0.3)`);
            gradient.addColorStop(1, `rgba(${currentBlushColor[0]}, ${currentBlushColor[1]}, ${currentBlushColor[2]}, 0)`);
            
            canvasCtx.fillStyle = gradient;
            canvasCtx.beginPath();
            canvasCtx.arc(centerX, centerY, 40, 0, 2 * Math.PI);
            canvasCtx.fill();
        }

        // 상태 업데이트
        function updateStatus(type, message) {
            const statusElement = document.getElementById('faceStatus');
            statusElement.className = `makeup-status ${type}`;
            statusElement.textContent = message;
        }

        // 컨트롤 리스너 설정
        function setupControlListeners() {
            // 립스틱 컬러
            document.querySelectorAll('#lipColors .color-option').forEach(option => {
                option.addEventListener('click', function() {
                    document.querySelectorAll('#lipColors .color-option').forEach(opt => opt.classList.remove('active'));
                    this.classList.add('active');
                    currentLipColor = this.dataset.color.split(',').map(Number);
                });
            });

            // 블러셔 컬러
            document.querySelectorAll('#blushColors .color-option').forEach(option => {
                option.addEventListener('click', function() {
                    document.querySelectorAll('#blushColors .color-option').forEach(opt => opt.classList.remove('active'));
                    this.classList.add('active');
                    currentBlushColor = this.dataset.color.split(',').map(Number);
                });
            });

            // 강도 슬라이더
            document.getElementById('lipIntensity').addEventListener('input', function() {
                lipIntensity = parseFloat(this.value);
            });

            document.getElementById('blushIntensity').addEventListener('input', function() {
                blushIntensity = parseFloat(this.value);
            });
        }

        // 사진 캡처
        function capturePhoto() {
            if (!faceDetected) {
                alert('얼굴이 인식되지 않았어요. 화면에 얼굴을 맞춰주세요.');
                return;
            }

            const tempCanvas = document.createElement('canvas');
            const tempCtx = tempCanvas.getContext('2d');
            
            tempCanvas.width = inputVideo.videoWidth;
            tempCanvas.height = inputVideo.videoHeight;
            
            tempCtx.save();
            tempCtx.scale(-1, 1);
            tempCtx.drawImage(inputVideo, -tempCanvas.width, 0, tempCanvas.width, tempCanvas.height);
            tempCtx.restore();
            
            tempCtx.drawImage(outputCanvas, 0, 0);
            
            tempCanvas.toBlob(function(blob) {
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `colormatch-ai-makeup-${Date.now()}.png`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                alert('💄 완성된 메이크업이 저장되었어요! 정말 잘 어울리네요 ✨');
            }, 'image/png');
        }

        // 메이크업 리셋
        function resetMakeup() {
            lipIntensity = 0;
            blushIntensity = 0;
            document.getElementById('lipIntensity').value = 0;
            document.getElementById('blushIntensity').value = 0;
            
            setTimeout(() => {
                lipIntensity = 0.6;
                blushIntensity = 0.4;
                document.getElementById('lipIntensity').value = 0.6;
                document.getElementById('blushIntensity').value = 0.4;
                
                document.querySelectorAll('#lipColors .color-option').forEach(opt => opt.classList.remove('active'));
                document.querySelectorAll('#blushColors .color-option').forEach(opt => opt.classList.remove('active'));
                
                document.querySelector('#lipColors .color-option:first-child').classList.add('active');
                document.querySelector('#blushColors .color-option:first-child').classList.add('active');
                
                currentLipColor = [199, 92, 92];
                currentBlushColor = [255, 127, 80];
            }, 500);
        }

        // 라이브러리 로드 체크
        function checkLibrariesLoaded() {
            const requiredLibs = ['FaceMesh', 'Camera'];
            const missingLibs = requiredLibs.filter(lib => typeof window[lib] === 'undefined');
            
            if (missingLibs.length > 0) {
                console.warn('Missing libraries:', missingLibs);
                return false;
            }
            
            return true;
        }

        // 페이지 로드 이벤트
        window.addEventListener('load', function() {
            setTimeout(() => {
                if (!checkLibrariesLoaded()) {
                    console.warn('MediaPipe 라이브러리가 완전히 로드되지 않았습니다.');
                }
            }, 2000);
        });

        // 에러 핸들링
        window.addEventListener('error', function(e) {
            console.error('전역 에러:', e.error);
            
            if (e.error && e.error.message) {
                if (e.error.message.includes('MediaPipe') || e.error.message.includes('FaceMesh')) {
                    updateStatus('error', 'AI 엔진 로드에 실패했습니다. 페이지를 새로고침해주세요.');
                }
            }
        });

        // 키보드 단축키
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                goHome();
            } else if (e.key === 'r' || e.key === 'R') {
                e.preventDefault();
                resetMakeup();
            } else if (e.key === 'c' || e.key === 'C') {
                e.preventDefault();
                capturePhoto();
            }
        });

        // 브라우저 호환성 확인
        function checkBrowserCompatibility() {
            const requiredFeatures = [
                'mediaDevices' in navigator,
                'getUserMedia' in (navigator.mediaDevices || {}),
                'requestAnimationFrame' in window,
                'HTMLCanvasElement' in window
            ];
            
            const unsupportedFeatures = requiredFeatures.filter(feature => !feature);
            
            if (unsupportedFeatures.length > 0) {
                alert('이 브라우저는 일부 기능을 지원하지 않습니다. 최신 Chrome, Firefox, Safari, Edge를 사용해주세요.');
                return false;
            }
            
            return true;
        }

        // 앱 초기화
        document.addEventListener('DOMContentLoaded', function() {
            checkBrowserCompatibility();
        });

    </script>
</body>
</html>